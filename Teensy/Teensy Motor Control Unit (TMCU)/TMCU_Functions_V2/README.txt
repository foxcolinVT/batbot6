Teeny Motor Control Unit (TMCU)

This script serves to enact motor control commands. 
Motor control commands are generated by the Jetson, passed down through the M4 
and communicated to the Teensy via serial connection.

Wiring Connections:
			Pins 0,1 :			Serial1 Connection
			Pins 2 - (NUM_SERVOS + 2):	Servo Control Connection (max of 16 servos, limited by opcode)
			Pins 16-19:			Left Stepper
			Pins 20-23:			Right Stepper


The TMCU controls both the pan tilt unit and the stepper motors. 


SERVOS:
General info:
	Which servo corresponds to what function is undefined at the time of writing.
	The number of controllable servos can be adjusted by changing NUM_SERVOS.
	Servo 0 will be at pin 2, servo 1 will be at pin 3 and so on.
	Servo control is written for traditional (0-180 deg) servos. 
	Servo control data should be mapped as 1-1, where an input of 180 corresponds to a servo movement of 180 degrees.

Moving a servo:
	M4 sends Teensy an opcode of 0bXXXX0010 (0xX2) to indicate "move a servo"
	Upper nybble corresponds to which servo-	
							0x02 means "move servo 0"
							0x22 means "move servo 2"
							0x92 means "move servo 9"
	Next byte describes where to move said servo-
							0x00 means "move to 0"
							0x58 means "move to 90"
							0xB4 means "move to 180"

	The loop receives this info and calls the move servo function, which interprets which servo to move where.

STEPPERS:
General info:
	2 Steppers only capable of relative motion, meaning they only move relative to where they started.

	Note that theyis very sensitive to change since there is no positional feedback
	from the steppers to the teensy.

	This could be remedied by either getting motors with feedback or by 
	engineering a reference point for the steppers to index off of.
	(like the end of travel sensors for 3D printers).
	Steppers receive relative motion commands from the M4.

Moving a Stepper:
	M4 sends Teensy an opcode of 0bXXXX0011 (0xX3)
	The MSB of this opcode corresponds to which motor is being moved (1 for left, 0 for right)
	Second MSB of this opcode corresponds to which direction the motor is being moved (1 for left, 0 for right)
	
	Next byte contains number of steps to move.
	Loop recieves this info and calls the move stepper function which interpretes which stepper to move, by what amount of steps and in what direction.